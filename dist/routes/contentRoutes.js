"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.contentRouter = void 0;
const express_1 = __importDefault(require("express"));
const authMiddleware_1 = require("../middleware/authMiddleware");
const checkEditAccessMiddleware_1 = require("../middleware/checkEditAccessMiddleware");
const checkOwnerUsingContentIDMiddleware_1 = require("../middleware/checkOwnerUsingContentIDMiddleware");
const checkOwnerUsingParamsTokenMiddleware_1 = require("../middleware/checkOwnerUsingParamsTokenMiddleware");
const checkshareTypeAuthMiddleware_1 = require("../middleware/checkshareTypeAuthMiddleware");
const contentRouter = express_1.default.Router();
exports.contentRouter = contentRouter;
const contentController_1 = require("../controller/contentController");
contentRouter.post("/addContent", authMiddleware_1.authMiddleware, contentController_1.addContent);
contentRouter.get("/getContent", authMiddleware_1.authMiddleware, contentController_1.getContent);
contentRouter.delete("/deleteContent/:contentID", authMiddleware_1.authMiddleware, checkOwnerUsingContentIDMiddleware_1.checkOwnerUsingContentIDMiddleware, checkEditAccessMiddleware_1.checkEditAccessMiddleware, checkshareTypeAuthMiddleware_1.checkshareTypeAuthMiddleware, contentController_1.deleteContent);
contentRouter.post("/shareLink/:contentID", authMiddleware_1.authMiddleware, checkOwnerUsingContentIDMiddleware_1.checkOwnerUsingContentIDMiddleware, checkEditAccessMiddleware_1.checkEditAccessMiddleware, checkshareTypeAuthMiddleware_1.checkshareTypeAuthMiddleware, contentController_1.shareContent);
contentRouter.get("/fetchLinkContent/:token", authMiddleware_1.authMiddleware, checkOwnerUsingParamsTokenMiddleware_1.checkOwnerUsingParamsTokenMiddleware, checkshareTypeAuthMiddleware_1.checkshareTypeAuthMiddleware, contentController_1.fetchLinkContent);
contentRouter.put("/updateContent/:token", authMiddleware_1.authMiddleware, checkOwnerUsingParamsTokenMiddleware_1.checkOwnerUsingParamsTokenMiddleware, checkEditAccessMiddleware_1.checkEditAccessMiddleware, checkshareTypeAuthMiddleware_1.checkshareTypeAuthMiddleware, contentController_1.updateContent);
contentRouter.put("/deleteTags/:token", authMiddleware_1.authMiddleware, checkOwnerUsingParamsTokenMiddleware_1.checkOwnerUsingParamsTokenMiddleware, checkEditAccessMiddleware_1.checkEditAccessMiddleware, checkshareTypeAuthMiddleware_1.checkshareTypeAuthMiddleware, contentController_1.deleteTags);
